import React , { useReducer, useEffect }from 'react'
import { makeStyles, useTheme } from '@material-ui/core/styles'
import Card from '@material-ui/core/Card'
import CardActionArea from '@material-ui/core/CardActionArea'
import CardMedia from '@material-ui/core/CardMedia'
import IconButton from '@material-ui/core/IconButton'
import SkipPreviousIcon from '@material-ui/icons/SkipPrevious'
import SkipNextIcon from '@material-ui/icons/SkipNext'
import PlayArrowIcon from '@material-ui/icons/PlayArrow'
import PauseIcon from '@material-ui/icons/Pause'
import img1 from "./img/1.jpg"
import img2 from "./img/2.jpg"
import img3 from "./img/3.jpg"
import img4 from "./img/4.jpg"

const useStyles = makeStyles(theme => ({
  card: {
    width: 400
  },
  cardMedia: {
    position: 'absolute',
    left: 0,
    top: 0,
    right: 0,
    bottom: 0
  },
  controls: {
    display: 'flex',
    alignItems: 'center',
    justifyContent: 'center',
    padding: theme.spacing(1)  
  },
  playIcon: {
    width: 40,
    height: 40,
  },
  pauseIcon: {
    width: 40,
    height: 40,
  }
}))

export default props => {
  const classes = useStyles()
  const theme = useTheme()
  const images = [
    img1,
    img2,
    img3,
    img4
  ]
  const initialState = {
    currentIndex: 0,
    isPlaying: false,
  }
  const reducer = (state, action) => {
    switch(action.type) {
      case "NEXT":
      case "PROGRESS":
        return {
          ...state,
          currentIndex: (state.currentIndex + 1)%
            images.length
        }
      case "PREV":
        return {
          ...state,
          currentIndex: (state.currentIndex - 1 + images.length)%
            images.length
        }
      case "PLAY":
        return {
          ...state,
          isPlaying: true
        }
      case "PAUSE":
        return {
          ...state,
          isPlaying: false
        }
      case "GOTO":
        return {
          ...state,
          currentIndex: action.index
        }
      default:
        return state
    }
  }
  const [state, dispatch] = useReducer(reducer, initialState)

  useEffect(()=> {
    if (state.isPlaying) {
      let timeoutId = setTimeout(() => {
        dispatch({ type: "PROGRESS" })
      }, 3000)
      return () => clearTimeout(timeoutId)
    }
  }, [state.currentIndex, state.isPlaying])

  return <Card className={classes.card}>
    <div
      style={{
        position: 'relative',
        maxWidth: 400,
        height: 140,
      }}
    >
      {images.map((image, index) => <CardMedia
            key={index}
            image={image}
            className={classes.cardMedia}
            style={{
              opacity: index === state.currentIndex ? 1 : 0,
            }}
          />
      )}
      <div
        style={{
          position: 'absolute',
          bottom: 0,
          display: 'flex',
          alignItems: 'center',
          justifyContent: 'center',
          padding: theme.spacing(1)
        }}
      >
        {images.map((image, index) => <button
            key={index}
            onClick={() => dispatch({type: "GOTO", index})}
            style={{
              all: 'unset',
              cursor: 'pointer',
              borderRadius: '50%',
              height: '2rem',
              width: '2rem',
              display: 'flex',
              alignItems: 'center',
              justifyContent: 'center',
              marginRight: theme.spacing(1),
              backgroundColor: 'transparent',
            }}
          >
            <span
              style={{
                background: index === state.currentIndex ?
                  'hsla(0, 100%, 100%, 0.75)' :
                  'hsla(0, 100%, 100%, 0.25)'
                ,display: 'inline-block',
                height: '1rem',
                width:'1rem',
                borderRadius: '50%',
              }}
            />
          </button>
        )}
      </div>
    </div>
    <nav className={classes.controls}>
        <IconButton onClick={() => dispatch({type: "PREV"})}>
          <SkipPreviousIcon />
        </IconButton>
        { !state.isPlaying
          ? <IconButton onClick={() => dispatch({type: "PLAY"})}>
              <PlayArrowIcon className={classes.playIcon} />
            </IconButton>
          : <IconButton onClick={() => dispatch({type: "PAUSE"})}>
              <PauseIcon className={classes.pauseIcon} />
            </IconButton>
        }
        <IconButton onClick={() => dispatch({type: "NEXT"})}>
          <SkipNextIcon />
        </IconButton>
    </nav>
  </Card>
}
